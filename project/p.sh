#!/bin/bash

# p.sh:
#	Purpose:  Generate a Streamwork skeleton project 
#
#   Create GO/FBP project(s) from .SW file(s).   
#   Create directory(if not existing) and skeleton files, 
#     generate and test example code, and run the example.   
#   Project sub-directories are created in the current directory.
#   
#   Example:
#	$ ./p.sh g test/X
#

# @@TODO:  List of banned Modules.   Push Data to file, then have script read file. 
#    git branch to PS1
#    all packages import project code.

pgm=p.sh

Die() {
	echo "$self/DIE: $*"
	exit
}

Debug() {
        [ "$DEBUG" == "y" ] && echo "$pgm/DEBUG: $* " 
}

Debug Running $pgm w/DEBUG

#pat  is github Personal Access Token: "SW Project Generation"
pat=c7587f442e2bb2a7784dfa776dc949693aa43ed7 

self=p.sh
version="0.0.0"  
[ -z $GOPATH ] && Die GOPATH is not set
dir=$GOPATH/mod/
dir0=`pwd`

Display() {
	echo $self/$*
}

[ -d $dir ] || Die Missing directory: $dir

Init() {
	pushd $dir || Die Cannot pushd $dir
}	

GenCFG() {
	echo #  Project $p  SW.CFG file.Generated by $0 `date` 
	#       
	cat <<- EOF 
	StreamWork:
  defaults:  
    DefaultSourceComp: 	"Gen"
    DefaultSinkComp: 	"Prt"
    DefaultPath: 	"def"
    DefaultFilterComp: 	"Pass"  
    DefaultBufferSize: 	  0    #default GO buffersize
    HTMLdir:	"/home/tyoung3/go/mod/sw/html/" #Where tooltips live
    DefaultLibrary: "$p"
  limits:
    Maxbfsz:   	10000    #Maximum GO buffer size
  SymbolTable:
    Tablesize:	4000     
	
EOF
}

GenGo() {
	 module=$p
	 Debug GenGo:  $*  module=$module
	 /home/tyoung3/go/mod/sw/bin/sw -m 5 ${p}.sw > /tmp/GOGEN_$p.sh 	 
	 #chmod a+x ${p}.sh 					 
	 #bash ${p}.sh  $*	
	 for pkg in $*; do   
		 	/home/tyoung3/go/mod/sw/bin/swgen.sh gs $module $pkg YAML 0 2 Comp1;
		 	/home/tyoung3/go/mod/sw/bin/swgen.sh gs $module $pkg YAML 1 1 Comp2;
		 	/home/tyoung3/go/mod/sw/bin/swgen.sh gs $module $pkg YAML 2 0 Comp3;
	 done 
	 		 
}   

Genp() {
	echo GENP: $*
	pn=$1
	p=`basename $pn`
	sw=`pwd`/../${pn}.sw 
	[ -f $sw ] || Die Genp: Missing $sw 
	shift 1 
	[ -z $1 ] && Die No packages specified.  Try swgo $sw 
	echo; echo Generating  go module $p containing packages $* from $sw 
	[ -d $dir/$p  ] && mv $dir/$p $dir/${p}_$$ 
	[ -d $dir/$p ] || mkdir $dir/$p || Die Cannot mkdir $dir/$p
	tdir=`pwd`
	pushd $dir/$p							\
	   && mkdir $* internal						\
	   && go mod init $p/$p						\
	   && pushd internal 						\
		 && cp $tdir/*tmpl ./ 					\
	   	 &&[ -f ${p}.sw ] || cp  $sw ${p}.sw			\
	   	 && GenCFG  > sw.cfg					\
	   	 && sw ${p}.sw > main.go				\
	   	 && GenGo $*						\
	   	 && swgraph ${p}.sw 					\
	   && popd							\
	   && go run internal/main.go					\
	   && echo Project Build Success || echo Project Build $0:  OOPS!
	   go fmt  ./...
	   go test ./...
	echo
				 
}

GenProjectP() {
	[ -z $1 ] && Die Missing Module.sw
	Display GenProject for $*		 
	Genp $* 
}

GenProject() {
	[ -z $1 ] && ( Genp X Y ; exit 0 )  	\
	|| Display GenProject for $*		\
	, Genp $* 
}

KillEm() {
	for p in $*; do
		echo Kill $p
	done

}

case $1 in
	p)shift; Die option p OBSOLETE;;  # GenProject $*
	g)shift; GenProjectP $*;;
	k)shift; Init; KillEm $*;;
	l)shift; Init; tree --noreport  -L 2 $*;;
	x)shift; $EDITOR $self;;
	*)cat <<- EOF 

	Usage: $self 
	 	g [PROJECT ...]	. Generate project(s) from PROJECT.sw 
	 	k [JOB...]	. Kill [JOB](s)
	 	l [PROJECT ...] . List PROJECT(s)	
	 	x Edit this script
	 	* Display this help

EOF
	;;
esac
