 #!/bin/bash

# swproject:
#	Purpose:  Generate a Streamwork skeleton project 
#
#   Create GO FBP project(s) from .SW file(s).   
#   Create directory(if not existing) and skeleton files, 
#     generate and test example code, and run the example.   
#   Project sub-directories are created in the current directory.
#   
#   Example:
#	$ ./swproject  nds/postage.sw
#

        black="\u001b[30m"
        red="\u001b[31m"
        green="\u001b[32m"	
        lightgreen="\u001b[32;1m"	 
        yellow="\u001b[33m"
        blue="\u001b[34m"
        magenta="\u001b[35m"
        cyan="\u001b[36m"
        white="\u001b[37m"
        reset="\u001b[0m"
        
version="0.21.1"  
targetdir=/usr/local/src
pgm=swproject

Die() {
	echo -e "${red}$self/DIE: $*$reset"
	exit 1
}


Debug() {
        [ "$DEBUG" == "Y" ] && echo -e "$yellow$pgm/DEBUG: $* $reset " 
        # echo -e $red Debug $* $reset
        echo -n 
}

init() {
    Debug init
    [ -d $targetdir ] || Die Cannot find directory: $targetdir 
    swdir=/usr/local/bin
    [ -e $swdir/sw ] || swdir=/usr/local/bin
    SW=$swdir/sw
    [ -e $SW     ] || Die $SW is missing 
    self=$pgm
    modpath="github.com/tyoung3/"
    dir=$targetdir
    Debug Running ${pgm}-$version w/DEBUG args: $*
    [ -d $dir ] || Die Missing directory: $dir
}

Display() {
	Debug $*
}

GenCFG() {
	Debug $0/GenCFG $* 
	echo "# Generated by swproject-v$version/GenCFG $* for Project $p `date`" > sw.cfg
	
	case $# in
		0) 
		cat <<- EOF >> sw.cfg	
	StreamWork:
  defaults:  
    DefaultSourceComp: 	"Gen"
    DefaultSinkComp: 	"Print"
    DefaultPath: 	"$p"
    DefaultFilterComp: 	"Pass"  
    DefaultBufferSize: 	  0    #default GO buffersize
    HTMLdir:	    "$dir/html/"    
    DefaultLibrary: "$modpath"
  limits:
    Maxbfsz:   	1000    #Maximum GO buffer size
  SymbolTable:
    Tablesize:	10000     
	
EOF
	;;
		*)	 
			cat $1 > sw.cfg	
			    ;;
    esac	
}

GenGo() {
	 module=$p
	 Debug GenGo:  $*  module=$module yaml=$yamlq  pgm=$pgm
	 $SW -m 5 -yaml $yamlq ${p}.sw > ./gen.sh
	 chmod a+x ./gen.sh
	 # echo "package $module" > pkgTypes.go			 
	 ./gen.sh
	 # sed -e "s/$module//"  pkgTypes.go.s >  pkgTypes.go
	 # mv  pkgTypes.go.s pkgTypes.go
}    

Genp1() {
	Debug Genp1: $*
	sw=$1; cfg=$2 yamlq=$3
	[ -f $sw ] || sw="${sw}.sw"
	p=`basename -s .sw $sw`|| Die $sw not MODULE.sw  
	
	[ $sw == "sw" ]       &&Die Module sw is already in github/tyoung3  
	
	if [ -f `pwd`/$sw ]; then 
		sw=`pwd`/$sw
	fi
	#Debug sw=$sw p=$p $* 
	icfg=$cfg
	[ -f $sw ] || Die Genp1: Cannot locate $sw 
	shift 3
	[ -f $dir/$p/.git ] && Die Found .giGenpt in source directory -- FAILED 
	echo; # Display $0/GenP1: Generating  go module $p  from $sw
	[ -d $dir/$p ] && echo Updating go module $p  from $sw || echo Generating  go module $p  from $sw in $dir/$p
	[ -d $dir/$p/internal ] || mkdir -p $dir/$p/internal || Die Cannot mkdir $dir/$p/internal
	cp $cfg $dir/$p/internal/sw.cfg || Die Cannot copy $cfg
	cp  $sw $dir/$p/internal/${p}.sw || Die Cannot copy $sw  
}

Genp4() {
	      
	   pushd internal || Die Cannot pushd internal	
	         [ -f ${p}.go ] && mv ${p}.go ${p}.go.bak
	   	 # [ -f ${p}.sw ] && mv ${p}.sw ${p}.sw.bak  
	   	 Debug Genp4: internal run sw -cfg $cfg `pwd`/${p}.sw	 
	   	 ( [ -f $cfg ]  || GenCFG )  				\
	   	 && sw -cfg sw.cfg ${p}.sw > ${p}.go			\
	   	 && GenGo $* 						\
	   	 && go mod tidy						\
	   	 && swgraph ${p}.sw &
	   	 #  && wait
	   popd							
}

Genp2() {
	   Debug Genp2 in directory: $dir/$p
	   ( [ -d internal ] || mkdir internal )			\
	   && ( [ -d testdata ]   			 \
	   || ( mkdir testdata && echo "Go ignores testdata/" >testdata/README ) )			\
	   && ( [ -f go.mod ]  						\
	        || (go mod init $modpath$p; echo "replace $modpath$p => ./ " >> go.mod  ) \
	      )	    									\
	   && Genp4 									\
	   && echo -e "${green}$self: Create project from $sw: Success!$reset" 		\
	   || Die "${red}$self: Create project from $sw: FAILED.$reset"	\
	   && go mod tidy						\
	   && go fmt  ./...						\
	   && go test -coverporfile c.out					\
	   && go run internal/${p}.go					\
	   && echo -e "${green}$self: ${p}.go Succeeded. $reset" 	\
	   || Die "${red}$self:  ${p}.go FAILED.$reset"		
	   echo
}

Genp() {
    Genp1 $*
    pushd $dir/$p || Die Cannot pushd $dir/$p	 
    	  Genp2			
    popd 			 
}

GenProjectP() {
    Debug GenProjectP: cfg=$cfg
    case $1 in 
        -yaml)yamlq=$2; shift 2;GenProjectP $*;;
        -cfg)cfg=$2; shift 2
            case $cfg in
                none) ;;
                *)[ -f $cfg ] || Die Cannot find file: $cfg
                ;;
             esac
             GenProjectP $* 
             ;; 
        *)
	        nd=$1;
	        exam=src/nds/postage
	        [ -z $1 ]   \
	            && Die Missing PROJECT_NAME.  Try \'swproject $exam\' 
	        Display GenProject:  for nd=$nd  cfg=$cfg yamlq=$yamlq
	        Genp $nd $cfg $yamlq 
	        ;;
    esac
}

case $1 in
	x)shift; $EDITOR $self;;
	--help|/?|?)cat <<- EOF 

	Usage: ${self}  v$version 
	 	PROJECT   [ CONFIG_FILE ] . Generate project(s) from PROJECT[.sw] 
	 	-v              . Display version
	 	[-yaml YAMLOPT] . YAMLOPT = ["YAML"] or "NONE" 
	 	[-cfg CFG_FILE  . sw configuration vile
	 	--help 			. Display this help

EOF
	;;
	-v) echo genproject-v$version;;
	*)  init;cfg=sw.cfg;yamlq='YAML'; GenProjectP $*;;
esac
