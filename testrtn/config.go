package testrtn

/* Generated by swgen.sh */	      	 		
import config "github.com/zpatrick/go-config"
import "sync"
import "fmt"
       	 		
type ipT struct {   /* Information Packet type */ 
P string   /* Process Name  */
S string   /* modulepath/component */
I int      /* Port number */
}


// PkgConfig initializes the go-config package.  See: https://github.com/zpatrick/go-config for details
func PkgConfig()  *config.Config {
        mappings := map[string]string{
                "BUFFERSIZE": "buffersize",
                "SEQNO": "seqno=7",
        }
        
        return config.NewConfig([]config.Provider  {
                config.NewYAMLFile("/home/tyoung3/sw/testrn/testrtn.yaml"), 
                config.NewEnvironment(mappings)} )      
}
	
// Send transmits one IP   
func  Send( ci chan interface{}, wg2 *sync.WaitGroup, arg []string, nport int ) {
defer wg2.Done()
var ip ipT
ip.I = nport
ip.P = arg[0]
ci   <- ip
}	
// Recv receives and reports one IP
func  Recv( ci chan interface{}, wg2 *sync.WaitGroup, arg []string, nport int ) {
defer wg2.Done()
ip, _ := <- ci   
fmt.Println( arg[0], nport,  "received:", ip)
}						 
