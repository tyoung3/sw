/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Absyn.h"
#define initialize_lexer FBP_initialize_lexer
extern int yyparse(void);
extern int yylex(void);
int yy_mylinenumber;
extern int initialize_lexer(FILE * inp);
void yyerror(const char *str)
{
  extern char *FBPtext;
  fprintf(stderr,"error: line %d: %s at %s\n",
    yy_mylinenumber + 1, str, FBPtext);
}

ValidFBP YY_RESULT_ValidFBP_ = 0;
ValidFBP pValidFBP(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ValidFBP_;
  }
}

Stm YY_RESULT_Stm_ = 0;
Stm pStm(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stm_;
  }
}

ListStm YY_RESULT_ListStm_ = 0;
ListStm pListStm(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStm_;
  }
}

Flow YY_RESULT_Flow_ = 0;
Flow pFlow(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Flow_;
  }
}

Srce YY_RESULT_Srce_ = 0;
Srce pSrce(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Srce_;
  }
}

Snk YY_RESULT_Snk_ = 0;
Snk pSnk(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Snk_;
  }
}

Prcss YY_RESULT_Prcss_ = 0;
Prcss pPrcss(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Prcss_;
  }
}

Prt YY_RESULT_Prt_ = 0;
Prt pPrt(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Prt_;
  }
}

Comp YY_RESULT_Comp_ = 0;
Comp pComp(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Comp_;
  }
}

Compn YY_RESULT_Compn_ = 0;
Compn pCompn(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Compn_;
  }
}


ListStm reverseListStm(ListStm l)
{
  ListStm prev = 0;
  ListStm tmp = 0;
  while (l)
  {
    tmp = l->liststm_;
    l->liststm_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  ValidFBP validfbp_;
  Stm stm_;
  ListStm liststm_;
  Flow flow_;
  Srce srce_;
  Snk snk_;
  Prcss prcss_;
  Prt prt_;
  Comp comp_;
  Compn compn_;

}

%token _ERROR_
%token _SYMB_0    /*   ->   */
%token _SYMB_1    /*   =   */
%token _SYMB_2    /*   .   */
%token _SYMB_3    /*   :   */
%token _SYMB_4    /*   ,   */
%token _SYMB_5    /*   (   */
%token _SYMB_6    /*   )   */
%token _SYMB_7    /*   INPORT   */
%token _SYMB_8    /*   OUTPORT   */

%type <validfbp_> ValidFBP
%type <stm_> Stm
%type <liststm_> ListStm
%type <flow_> Flow
%type <srce_> Srce
%type <snk_> Snk
%type <prcss_> Prcss
%type <prt_> Prt
%type <comp_> Comp
%type <compn_> Compn

%token<string_> _STRING_
%token<string_> _IDENT_

%start ValidFBP
%%
ValidFBP : ListStm { $$ = make_Valid($1); YY_RESULT_ValidFBP_= $$; } 
;
Stm : _STRING_ _SYMB_0 Prt Prcss Comp { $$ = make_Stma($1, $3, $4, $5);  } 
  | Flow { $$ = make_Stmf($1);  }
  | _SYMB_7 _SYMB_1 _IDENT_ _SYMB_2 _IDENT_ _SYMB_3 _IDENT_ { $$ = make_Stmi($3, $5, $7);  }
  | _SYMB_8 _SYMB_1 _IDENT_ _SYMB_2 _IDENT_ _SYMB_3 _IDENT_ { $$ = make_Stmo($3, $5, $7);  }
;
ListStm : /* empty */ { $$ = 0;  } 
  | Stm { $$ = make_ListStm($1, 0);  }
  | Stm _SYMB_4 ListStm { $$ = make_ListStm($1, $3);  }
;
Flow : Srce _SYMB_0 Snk { $$ = make_Flowa($1, $3);  } 
  | Flow _SYMB_0 Snk { $$ = make_FLowb($1, $3);  }
;
Srce : Prcss Comp Prt { $$ = make_Srca($1, $2, $3);  } 
;
Snk : Prt Prcss Comp { $$ = make_Snka($1, $2, $3);  } 
;
Prcss : _IDENT_ { $$ = make_Prcssa($1);  } 
;
Prt : _IDENT_ { $$ = make_Prta($1);  } 
;
Comp : _SYMB_5 Compn _SYMB_6 { $$ = make_Compa($2);  } 
;
Compn : _IDENT_ { $$ = make_Compma($1);  } 
  | _IDENT_ _SYMB_3 _STRING_ { $$ = make_Compmb($1, $3);  }
  | /* empty */ { $$ = make_Compme();  }
;

